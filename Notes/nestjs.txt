Nest.Js :-----
------------------

1. NestJs is used for building efficient, scalable Node.js server-side applications.
2. It uses prograssive JavaScript, is built with fully supports typeScript.
3. It combines elements of OOP(Object Oriented Programming), FP(Functional Programming), and FRP(Functional Reactive Programming).
4. Under the hood, Nest makes use of robust HTTP server frameworks like Experss(the default) and optionally can be configured to use fastify as well.

Steps to create nestJs project :--
----------------------------------
1. nest new <project Name>
2. npm start/ npm run start:dev.

Dependency Injection :--
-------------------------
1. Dependecy class is called Injectable and is annotated with @Injectable().
2. "provider : [{provide: "Name of injected class", useClass : "class name"}]" or "providers: [className]" This is syntax to use injected class.
3. We can inject object, array, varaibles in provider like ----->provider:[{provide:"Names", userValue:["harit", "Kartik"]}]

Scopes :--
-----------

1. Default scope
2. Request scope
3. Transient scope

Module :---
------------
imports:[JobModule, RouterModule.register([{path:'jobs', module: JobMoudle}])]

Pipe :---
-----------
1. ParseIntPine :-- convert to number
@Param("id", ParseIntPipe) id : number
            Or
@UsePipes(ParseIntPipe)



@Module({  
providers: [    
    {
        provide : 'EVENT_STORE',
        useFactory: async (limit : number ) => {
            const eventBus = IS_DEV_MODE ? new ReplaySubject(limit) : new BehaviourSubject();

            return eventBus;
        },
        inject:[{token: "LIMIT", optional : true}],
    },
    {
        provide : "LIMIT",
        useValue : 2
    },
   ],
})

Reading Enviroment variable :---
----------------------------------

1. npm install --save @nestjs/config
2. Use ConfigService
3. configService.get("key name");


Adding Mongoose to nest :--
---------------------------
1. npm install --save @nestjs/mongoose mongoose
2. MongooseModuleOptions